language: node_js
node_js:
  - 14

services:
  - docker

env:
  - DOCKER_COMPOSE_VERSION: 1.26.0
  
before_install:
  # Print the version for logging
  - docker --version && docker-compose --version
  

  ## Upgrade Docker Compose
  # 1. Remove existing docker-compose
  - sudo rm /usr/local/bin/docker-compose

  # 2. Get the docker compose
  - curl -L https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-`uname -s`-`uname -m` > docker-compose

  # 3. Update permissions for the folder and move it to system dir
  - chmod +x docker-compose
  - sudo mv docker-compose /usr/local/bin


  ## Configure AWS

  # 1. Get AWS CLI, install it and set path variable
  - curl https://s3.amazonaws.com/aws-cli/awscli-bundle.zip -o awscli-bundle.zip
  - unzip awscli-bundle.zip
  - ./awscli-bundle/install -b ~/bin/aws
  - export PATH=~/bin:$PATH
  
  # 2. Create config dir
  - mkdir ${HOME}/.aws

  # 3. Set AWS Configs
  # AWS_CONFIG environment variable in Travis will hold base64 encoded string of your .aws/config file
  - echo "$AWS_CONFIG" | base64 --decode > ${HOME}/.aws/config

  # 4. AWS Credentials
  # AWS_CREDS environment variable in Travis will hold base64 encoded string of your .aws/credentials file
  - echo "$AWS_CREDS" | base64 --decode > ${HOME}/.aws/credentials


  ## Configure Kubernetes - Ref: https://caveofcode.com/continuous-delivery-to-kubernetes-with-travis-ci/
  # 1. Get Kubernetes
  - curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
  
  # 2. Update permissions and move it to system dir
  - chmod +x ./kubectl
  - sudo mv ./kubectl /usr/local/bin/kubectl

  # 3. Set kubernetes cluster config
  - mkdir ${HOME}/.kube
  # KUBE_CONFIG environment variable in Travis will hold base64 encoded string of your .kube/config file
  - echo "$KUBE_CONFIG" | base64 --decode > ${HOME}/.kube/config

  # 4. Verify
  - kubectl get pods

install:
  # Build and push docker images
  - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
  - docker-compose build --parallel
  - docker-compose push

script:
  # Deploy docker images to our kubernetes cluster
  - echo "Kubernetes deployment is yet to be configured!"
